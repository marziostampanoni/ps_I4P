<?php
/*
 * This file is part of Moodle - http://moodle.org/
 * Moodle is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Moodle is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
 */

/** 
 * Definition of the factory that allows to create web service instances.
 *
 * @package    enrol_supsifb
 * @copyright  2014 Guglielmo Fachini {@link http://fachini.net}
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace enrol_supsifb\ws;

// moodle requirements
require_once("$CFG->dirroot/config.php");

class factory {

    /** 
     * @var closure the closure from which the Web Service instances are generated.
     */
    private static $generator;

    /**
     * Inject a generator of Web Services in the factory.
     * After the execution of that method, all the requested Web Service instances
     * will be generated by the injected generator.
     * 
     * @param a closure that accepts the parameters needed to create an instance 
     *        of the Web Service.
     */
    public static function inject($generator) {
        factory::$generator = $generator; 
    }

    /**
     * Inject a Web Service object.
     * This is method is similar to 'inject' because it injects something to 
     * return when a web service instance is requested. The main difference is 
     * that 'inject' accepts a Closure that each time returns a new instance, 
     * while this method accepts an object that is always returned when the 
     * 'generate' method is called.
     * This is a sort of 'singleton' object injection.
     *
     * @param the object to inject
     */
    public static function inject_object($object) {
        factory::inject(function ($ws_location, $username, $password) use ($object) {
            return $object;
        });
    }

    /**
     * The type of the returned instance is decided based on the settings 
     * defined in the relative plugin moodle's page. 
     *
     * @return supsifb_ws the default Web Service class instance
     */
    public static function create() {
		// retrieve the web service location, username and password from the plugin settings 
		$ws_location = get_config('enrol_supsifb', 'ws_location');
        $username = get_config('enrol_supsifb', 'ws_username');
		$password = get_config('enrol_supsifbfc', 'ws_password');

		// returna an instance of the concrete web service
        return factory::create_concrete_ws($ws_location, $username, $password);
    }

    /**
     * @param the location of the WSDL file
     * @param the api key used for the authentication
     *
     * @return supsifb_ws the instance of the Web Service accordingly to the fact that it 
     *         can be an injected closure that generates a fake web service.
     */
    private static function generate($ws_location, $username, $password) {
        // if nothing has been injected, return the default Web Service 
        // implementation
        if (is_null(factory::$generator)) {
            return concrete_ws::create($ws_location, $username, $password);
        }

        // otherwise, return the injected implementation
        return factory::$generator->__invoke($ws_location, $username, $password);
    }

    /**
     * Create and return the instance of the concrete Web Service class.
     *
     * @return concrete_ws the instance of the concrete Web Service class
     */
    private static function create_concrete_ws($ws_location, $username, $password) {
        return factory::generate($ws_location, $username, $password);
    }
}

